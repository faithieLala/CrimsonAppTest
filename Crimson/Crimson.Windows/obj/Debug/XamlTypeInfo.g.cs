//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace Crimson
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::Crimson.Crimson_Windows_XamlTypeInfo.XamlTypeInfoProvider _provider;

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::Crimson.Crimson_Windows_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::Crimson.Crimson_Windows_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace Crimson.Crimson_Windows_XamlTypeInfo
{
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[29];
            _typeNameTable[0] = "Crimson.AboutPage";
            _typeNameTable[1] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[2] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[3] = "Crimson.Common.ObservableDictionary";
            _typeNameTable[4] = "Object";
            _typeNameTable[5] = "String";
            _typeNameTable[6] = "Crimson.Common.NavigationHelper";
            _typeNameTable[7] = "Windows.UI.Xaml.DependencyObject";
            _typeNameTable[8] = "Crimson.Analysis";
            _typeNameTable[9] = "Crimson.checkstat";
            _typeNameTable[10] = "Crimson.MainPage";
            _typeNameTable[11] = "Crimson.QuickFacts";
            _typeNameTable[12] = "Crimson.Travel";
            _typeNameTable[13] = "System.Collections.Generic.List`1<System.Globalization.CultureInfo>";
            _typeNameTable[14] = "System.Globalization.CultureInfo";
            _typeNameTable[15] = "System.Globalization.Calendar";
            _typeNameTable[16] = "System.Globalization.CompareInfo";
            _typeNameTable[17] = "System.Globalization.DateTimeFormatInfo";
            _typeNameTable[18] = "Boolean";
            _typeNameTable[19] = "System.Globalization.NumberFormatInfo";
            _typeNameTable[20] = "System.Globalization.Calendar[]";
            _typeNameTable[21] = "System.Array";
            _typeNameTable[22] = "Int32[]";
            _typeNameTable[23] = "Int32";
            _typeNameTable[24] = "System.DateTime";
            _typeNameTable[25] = "System.ValueType";
            _typeNameTable[26] = "System.Globalization.TextInfo";
            _typeNameTable[27] = "Crimson.Travel.CultureTypes";
            _typeNameTable[28] = "System.Enum";

            _typeTable = new global::System.Type[29];
            _typeTable[0] = typeof(global::Crimson.AboutPage);
            _typeTable[1] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[2] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[3] = typeof(global::Crimson.Common.ObservableDictionary);
            _typeTable[4] = typeof(global::System.Object);
            _typeTable[5] = typeof(global::System.String);
            _typeTable[6] = typeof(global::Crimson.Common.NavigationHelper);
            _typeTable[7] = typeof(global::Windows.UI.Xaml.DependencyObject);
            _typeTable[8] = typeof(global::Crimson.Analysis);
            _typeTable[9] = typeof(global::Crimson.checkstat);
            _typeTable[10] = typeof(global::Crimson.MainPage);
            _typeTable[11] = typeof(global::Crimson.QuickFacts);
            _typeTable[12] = typeof(global::Crimson.Travel);
            _typeTable[13] = typeof(global::System.Collections.Generic.List<global::System.Globalization.CultureInfo>);
            _typeTable[14] = typeof(global::System.Globalization.CultureInfo);
            _typeTable[15] = typeof(global::System.Globalization.Calendar);
            _typeTable[16] = typeof(global::System.Globalization.CompareInfo);
            _typeTable[17] = typeof(global::System.Globalization.DateTimeFormatInfo);
            _typeTable[18] = typeof(global::System.Boolean);
            _typeTable[19] = typeof(global::System.Globalization.NumberFormatInfo);
            _typeTable[20] = typeof(global::System.Globalization.Calendar[]);
            _typeTable[21] = typeof(global::System.Array);
            _typeTable[22] = typeof(global::System.Int32[]);
            _typeTable[23] = typeof(global::System.Int32);
            _typeTable[24] = typeof(global::System.DateTime);
            _typeTable[25] = typeof(global::System.ValueType);
            _typeTable[26] = typeof(global::System.Globalization.TextInfo);
            _typeTable[27] = typeof(global::Crimson.Travel.CultureTypes);
            _typeTable[28] = typeof(global::System.Enum);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_AboutPage() { return new global::Crimson.AboutPage(); }
        private object Activate_3_ObservableDictionary() { return new global::Crimson.Common.ObservableDictionary(); }
        private object Activate_8_Analysis() { return new global::Crimson.Analysis(); }
        private object Activate_9_checkstat() { return new global::Crimson.checkstat(); }
        private object Activate_10_MainPage() { return new global::Crimson.MainPage(); }
        private object Activate_11_QuickFacts() { return new global::Crimson.QuickFacts(); }
        private object Activate_12_Travel() { return new global::Crimson.Travel(); }
        private object Activate_13_List() { return new global::System.Collections.Generic.List<global::System.Globalization.CultureInfo>(); }
        private object Activate_17_DateTimeFormatInfo() { return new global::System.Globalization.DateTimeFormatInfo(); }
        private object Activate_19_NumberFormatInfo() { return new global::System.Globalization.NumberFormatInfo(); }
        private void MapAdd_3_ObservableDictionary(object instance, object key, object item)
        {
            var collection = (global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>)instance;
            var newKey = (global::System.String)key;
            var newItem = (global::System.Object)item;
            collection.Add(newKey, newItem);
        }
        private void VectorAdd_13_List(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.Globalization.CultureInfo>)instance;
            var newItem = (global::System.Globalization.CultureInfo)item;
            collection.Add(newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::Crimson.Crimson_Windows_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::Crimson.Crimson_Windows_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  Crimson.AboutPage
                userType = new global::Crimson.Crimson_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_0_AboutPage;
                userType.AddMemberName("DefaultViewModel");
                userType.AddMemberName("NavigationHelper");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 1:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::Crimson.Crimson_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::Crimson.Crimson_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 3:   //  Crimson.Common.ObservableDictionary
                userType = new global::Crimson.Crimson_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.DictionaryAdd = MapAdd_3_ObservableDictionary;
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 4:   //  Object
                xamlType = new global::Crimson.Crimson_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 5:   //  String
                xamlType = new global::Crimson.Crimson_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 6:   //  Crimson.Common.NavigationHelper
                userType = new global::Crimson.Crimson_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 7:   //  Windows.UI.Xaml.DependencyObject
                xamlType = new global::Crimson.Crimson_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 8:   //  Crimson.Analysis
                userType = new global::Crimson.Crimson_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_8_Analysis;
                userType.AddMemberName("DefaultViewModel");
                userType.AddMemberName("NavigationHelper");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 9:   //  Crimson.checkstat
                userType = new global::Crimson.Crimson_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_9_checkstat;
                userType.AddMemberName("DefaultViewModel");
                userType.AddMemberName("NavigationHelper");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 10:   //  Crimson.MainPage
                userType = new global::Crimson.Crimson_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_10_MainPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 11:   //  Crimson.QuickFacts
                userType = new global::Crimson.Crimson_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_11_QuickFacts;
                userType.AddMemberName("DefaultViewModel");
                userType.AddMemberName("NavigationHelper");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 12:   //  Crimson.Travel
                userType = new global::Crimson.Crimson_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_12_Travel;
                userType.AddMemberName("DefaultViewModel");
                userType.AddMemberName("NavigationHelper");
                userType.AddMemberName("Cultures");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 13:   //  System.Collections.Generic.List`1<System.Globalization.CultureInfo>
                userType = new global::Crimson.Crimson_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.CollectionAdd = VectorAdd_13_List;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 14:   //  System.Globalization.CultureInfo
                userType = new global::Crimson.Crimson_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.AddMemberName("Calendar");
                userType.AddMemberName("CompareInfo");
                userType.AddMemberName("DateTimeFormat");
                userType.AddMemberName("DisplayName");
                userType.AddMemberName("EnglishName");
                userType.AddMemberName("IsNeutralCulture");
                userType.AddMemberName("IsReadOnly");
                userType.AddMemberName("Name");
                userType.AddMemberName("NativeName");
                userType.AddMemberName("NumberFormat");
                userType.AddMemberName("OptionalCalendars");
                userType.AddMemberName("Parent");
                userType.AddMemberName("TextInfo");
                userType.AddMemberName("TwoLetterISOLanguageName");
                xamlType = userType;
                break;

            case 15:   //  System.Globalization.Calendar
                userType = new global::Crimson.Crimson_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.AddMemberName("Eras");
                userType.AddMemberName("IsReadOnly");
                userType.AddMemberName("MaxSupportedDateTime");
                userType.AddMemberName("MinSupportedDateTime");
                userType.AddMemberName("TwoDigitYearMax");
                xamlType = userType;
                break;

            case 16:   //  System.Globalization.CompareInfo
                userType = new global::Crimson.Crimson_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 17:   //  System.Globalization.DateTimeFormatInfo
                userType = new global::Crimson.Crimson_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 18:   //  Boolean
                xamlType = new global::Crimson.Crimson_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 19:   //  System.Globalization.NumberFormatInfo
                userType = new global::Crimson.Crimson_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 20:   //  System.Globalization.Calendar[]
                userType = new global::Crimson.Crimson_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Array"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 21:   //  System.Array
                userType = new global::Crimson.Crimson_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 22:   //  Int32[]
                userType = new global::Crimson.Crimson_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Array"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 23:   //  Int32
                xamlType = new global::Crimson.Crimson_Windows_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 24:   //  System.DateTime
                userType = new global::Crimson.Crimson_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 25:   //  System.ValueType
                userType = new global::Crimson.Crimson_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 26:   //  System.Globalization.TextInfo
                userType = new global::Crimson.Crimson_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 27:   //  Crimson.Travel.CultureTypes
                userType = new global::Crimson.Crimson_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("AllCultures", global::Crimson.Travel.CultureTypes.AllCultures);
                userType.AddEnumValue("NeutralCultures", global::Crimson.Travel.CultureTypes.NeutralCultures);
                userType.AddEnumValue("SpecificCultures", global::Crimson.Travel.CultureTypes.SpecificCultures);
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 28:   //  System.Enum
                userType = new global::Crimson.Crimson_Windows_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;
            }
            return xamlType;
        }


        private object get_0_AboutPage_DefaultViewModel(object instance)
        {
            var that = (global::Crimson.AboutPage)instance;
            return that.DefaultViewModel;
        }
        private object get_1_AboutPage_NavigationHelper(object instance)
        {
            var that = (global::Crimson.AboutPage)instance;
            return that.NavigationHelper;
        }
        private object get_2_Analysis_DefaultViewModel(object instance)
        {
            var that = (global::Crimson.Analysis)instance;
            return that.DefaultViewModel;
        }
        private object get_3_Analysis_NavigationHelper(object instance)
        {
            var that = (global::Crimson.Analysis)instance;
            return that.NavigationHelper;
        }
        private object get_4_checkstat_DefaultViewModel(object instance)
        {
            var that = (global::Crimson.checkstat)instance;
            return that.DefaultViewModel;
        }
        private object get_5_checkstat_NavigationHelper(object instance)
        {
            var that = (global::Crimson.checkstat)instance;
            return that.NavigationHelper;
        }
        private object get_6_QuickFacts_DefaultViewModel(object instance)
        {
            var that = (global::Crimson.QuickFacts)instance;
            return that.DefaultViewModel;
        }
        private object get_7_QuickFacts_NavigationHelper(object instance)
        {
            var that = (global::Crimson.QuickFacts)instance;
            return that.NavigationHelper;
        }
        private object get_8_Travel_DefaultViewModel(object instance)
        {
            var that = (global::Crimson.Travel)instance;
            return that.DefaultViewModel;
        }
        private object get_9_Travel_NavigationHelper(object instance)
        {
            var that = (global::Crimson.Travel)instance;
            return that.NavigationHelper;
        }
        private object get_10_Travel_Cultures(object instance)
        {
            return global::Crimson.Travel.GetCultures((global::Crimson.Travel.CultureTypes)instance);
        }
        private object get_11_CultureInfo_Calendar(object instance)
        {
            var that = (global::System.Globalization.CultureInfo)instance;
            return that.Calendar;
        }
        private object get_12_CultureInfo_CompareInfo(object instance)
        {
            var that = (global::System.Globalization.CultureInfo)instance;
            return that.CompareInfo;
        }
        private object get_13_CultureInfo_DateTimeFormat(object instance)
        {
            var that = (global::System.Globalization.CultureInfo)instance;
            return that.DateTimeFormat;
        }
        private void set_13_CultureInfo_DateTimeFormat(object instance, object Value)
        {
            var that = (global::System.Globalization.CultureInfo)instance;
            that.DateTimeFormat = (global::System.Globalization.DateTimeFormatInfo)Value;
        }
        private object get_14_CultureInfo_DisplayName(object instance)
        {
            var that = (global::System.Globalization.CultureInfo)instance;
            return that.DisplayName;
        }
        private object get_15_CultureInfo_EnglishName(object instance)
        {
            var that = (global::System.Globalization.CultureInfo)instance;
            return that.EnglishName;
        }
        private object get_16_CultureInfo_IsNeutralCulture(object instance)
        {
            var that = (global::System.Globalization.CultureInfo)instance;
            return that.IsNeutralCulture;
        }
        private object get_17_CultureInfo_IsReadOnly(object instance)
        {
            var that = (global::System.Globalization.CultureInfo)instance;
            return that.IsReadOnly;
        }
        private object get_18_CultureInfo_Name(object instance)
        {
            var that = (global::System.Globalization.CultureInfo)instance;
            return that.Name;
        }
        private object get_19_CultureInfo_NativeName(object instance)
        {
            var that = (global::System.Globalization.CultureInfo)instance;
            return that.NativeName;
        }
        private object get_20_CultureInfo_NumberFormat(object instance)
        {
            var that = (global::System.Globalization.CultureInfo)instance;
            return that.NumberFormat;
        }
        private void set_20_CultureInfo_NumberFormat(object instance, object Value)
        {
            var that = (global::System.Globalization.CultureInfo)instance;
            that.NumberFormat = (global::System.Globalization.NumberFormatInfo)Value;
        }
        private object get_21_CultureInfo_OptionalCalendars(object instance)
        {
            var that = (global::System.Globalization.CultureInfo)instance;
            return that.OptionalCalendars;
        }
        private object get_22_Calendar_Eras(object instance)
        {
            var that = (global::System.Globalization.Calendar)instance;
            return that.Eras;
        }
        private object get_23_Calendar_IsReadOnly(object instance)
        {
            var that = (global::System.Globalization.Calendar)instance;
            return that.IsReadOnly;
        }
        private object get_24_Calendar_MaxSupportedDateTime(object instance)
        {
            var that = (global::System.Globalization.Calendar)instance;
            return that.MaxSupportedDateTime;
        }
        private object get_25_Calendar_MinSupportedDateTime(object instance)
        {
            var that = (global::System.Globalization.Calendar)instance;
            return that.MinSupportedDateTime;
        }
        private object get_26_Calendar_TwoDigitYearMax(object instance)
        {
            var that = (global::System.Globalization.Calendar)instance;
            return that.TwoDigitYearMax;
        }
        private void set_26_Calendar_TwoDigitYearMax(object instance, object Value)
        {
            var that = (global::System.Globalization.Calendar)instance;
            that.TwoDigitYearMax = (global::System.Int32)Value;
        }
        private object get_27_CultureInfo_Parent(object instance)
        {
            var that = (global::System.Globalization.CultureInfo)instance;
            return that.Parent;
        }
        private object get_28_CultureInfo_TextInfo(object instance)
        {
            var that = (global::System.Globalization.CultureInfo)instance;
            return that.TextInfo;
        }
        private object get_29_CultureInfo_TwoLetterISOLanguageName(object instance)
        {
            var that = (global::System.Globalization.CultureInfo)instance;
            return that.TwoLetterISOLanguageName;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::Crimson.Crimson_Windows_XamlTypeInfo.XamlMember xamlMember = null;
            global::Crimson.Crimson_Windows_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Crimson.AboutPage.DefaultViewModel":
                userType = (global::Crimson.Crimson_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Crimson.AboutPage");
                xamlMember = new global::Crimson.Crimson_Windows_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "Crimson.Common.ObservableDictionary");
                xamlMember.Getter = get_0_AboutPage_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Crimson.AboutPage.NavigationHelper":
                userType = (global::Crimson.Crimson_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Crimson.AboutPage");
                xamlMember = new global::Crimson.Crimson_Windows_XamlTypeInfo.XamlMember(this, "NavigationHelper", "Crimson.Common.NavigationHelper");
                xamlMember.Getter = get_1_AboutPage_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "Crimson.Analysis.DefaultViewModel":
                userType = (global::Crimson.Crimson_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Crimson.Analysis");
                xamlMember = new global::Crimson.Crimson_Windows_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "Crimson.Common.ObservableDictionary");
                xamlMember.Getter = get_2_Analysis_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Crimson.Analysis.NavigationHelper":
                userType = (global::Crimson.Crimson_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Crimson.Analysis");
                xamlMember = new global::Crimson.Crimson_Windows_XamlTypeInfo.XamlMember(this, "NavigationHelper", "Crimson.Common.NavigationHelper");
                xamlMember.Getter = get_3_Analysis_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "Crimson.checkstat.DefaultViewModel":
                userType = (global::Crimson.Crimson_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Crimson.checkstat");
                xamlMember = new global::Crimson.Crimson_Windows_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "Crimson.Common.ObservableDictionary");
                xamlMember.Getter = get_4_checkstat_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Crimson.checkstat.NavigationHelper":
                userType = (global::Crimson.Crimson_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Crimson.checkstat");
                xamlMember = new global::Crimson.Crimson_Windows_XamlTypeInfo.XamlMember(this, "NavigationHelper", "Crimson.Common.NavigationHelper");
                xamlMember.Getter = get_5_checkstat_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "Crimson.QuickFacts.DefaultViewModel":
                userType = (global::Crimson.Crimson_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Crimson.QuickFacts");
                xamlMember = new global::Crimson.Crimson_Windows_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "Crimson.Common.ObservableDictionary");
                xamlMember.Getter = get_6_QuickFacts_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Crimson.QuickFacts.NavigationHelper":
                userType = (global::Crimson.Crimson_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Crimson.QuickFacts");
                xamlMember = new global::Crimson.Crimson_Windows_XamlTypeInfo.XamlMember(this, "NavigationHelper", "Crimson.Common.NavigationHelper");
                xamlMember.Getter = get_7_QuickFacts_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "Crimson.Travel.DefaultViewModel":
                userType = (global::Crimson.Crimson_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Crimson.Travel");
                xamlMember = new global::Crimson.Crimson_Windows_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "Crimson.Common.ObservableDictionary");
                xamlMember.Getter = get_8_Travel_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Crimson.Travel.NavigationHelper":
                userType = (global::Crimson.Crimson_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Crimson.Travel");
                xamlMember = new global::Crimson.Crimson_Windows_XamlTypeInfo.XamlMember(this, "NavigationHelper", "Crimson.Common.NavigationHelper");
                xamlMember.Getter = get_9_Travel_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "Crimson.Travel.Cultures":
                userType = (global::Crimson.Crimson_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Crimson.Travel");
                xamlMember = new global::Crimson.Crimson_Windows_XamlTypeInfo.XamlMember(this, "Cultures", "System.Collections.Generic.List`1<System.Globalization.CultureInfo>");
                xamlMember.SetTargetTypeName("Crimson.Travel.CultureTypes");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_10_Travel_Cultures;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Globalization.CultureInfo.Calendar":
                userType = (global::Crimson.Crimson_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Globalization.CultureInfo");
                xamlMember = new global::Crimson.Crimson_Windows_XamlTypeInfo.XamlMember(this, "Calendar", "System.Globalization.Calendar");
                xamlMember.Getter = get_11_CultureInfo_Calendar;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Globalization.CultureInfo.CompareInfo":
                userType = (global::Crimson.Crimson_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Globalization.CultureInfo");
                xamlMember = new global::Crimson.Crimson_Windows_XamlTypeInfo.XamlMember(this, "CompareInfo", "System.Globalization.CompareInfo");
                xamlMember.Getter = get_12_CultureInfo_CompareInfo;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Globalization.CultureInfo.DateTimeFormat":
                userType = (global::Crimson.Crimson_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Globalization.CultureInfo");
                xamlMember = new global::Crimson.Crimson_Windows_XamlTypeInfo.XamlMember(this, "DateTimeFormat", "System.Globalization.DateTimeFormatInfo");
                xamlMember.Getter = get_13_CultureInfo_DateTimeFormat;
                xamlMember.Setter = set_13_CultureInfo_DateTimeFormat;
                break;
            case "System.Globalization.CultureInfo.DisplayName":
                userType = (global::Crimson.Crimson_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Globalization.CultureInfo");
                xamlMember = new global::Crimson.Crimson_Windows_XamlTypeInfo.XamlMember(this, "DisplayName", "String");
                xamlMember.Getter = get_14_CultureInfo_DisplayName;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Globalization.CultureInfo.EnglishName":
                userType = (global::Crimson.Crimson_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Globalization.CultureInfo");
                xamlMember = new global::Crimson.Crimson_Windows_XamlTypeInfo.XamlMember(this, "EnglishName", "String");
                xamlMember.Getter = get_15_CultureInfo_EnglishName;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Globalization.CultureInfo.IsNeutralCulture":
                userType = (global::Crimson.Crimson_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Globalization.CultureInfo");
                xamlMember = new global::Crimson.Crimson_Windows_XamlTypeInfo.XamlMember(this, "IsNeutralCulture", "Boolean");
                xamlMember.Getter = get_16_CultureInfo_IsNeutralCulture;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Globalization.CultureInfo.IsReadOnly":
                userType = (global::Crimson.Crimson_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Globalization.CultureInfo");
                xamlMember = new global::Crimson.Crimson_Windows_XamlTypeInfo.XamlMember(this, "IsReadOnly", "Boolean");
                xamlMember.Getter = get_17_CultureInfo_IsReadOnly;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Globalization.CultureInfo.Name":
                userType = (global::Crimson.Crimson_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Globalization.CultureInfo");
                xamlMember = new global::Crimson.Crimson_Windows_XamlTypeInfo.XamlMember(this, "Name", "String");
                xamlMember.Getter = get_18_CultureInfo_Name;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Globalization.CultureInfo.NativeName":
                userType = (global::Crimson.Crimson_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Globalization.CultureInfo");
                xamlMember = new global::Crimson.Crimson_Windows_XamlTypeInfo.XamlMember(this, "NativeName", "String");
                xamlMember.Getter = get_19_CultureInfo_NativeName;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Globalization.CultureInfo.NumberFormat":
                userType = (global::Crimson.Crimson_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Globalization.CultureInfo");
                xamlMember = new global::Crimson.Crimson_Windows_XamlTypeInfo.XamlMember(this, "NumberFormat", "System.Globalization.NumberFormatInfo");
                xamlMember.Getter = get_20_CultureInfo_NumberFormat;
                xamlMember.Setter = set_20_CultureInfo_NumberFormat;
                break;
            case "System.Globalization.CultureInfo.OptionalCalendars":
                userType = (global::Crimson.Crimson_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Globalization.CultureInfo");
                xamlMember = new global::Crimson.Crimson_Windows_XamlTypeInfo.XamlMember(this, "OptionalCalendars", "System.Globalization.Calendar[]");
                xamlMember.Getter = get_21_CultureInfo_OptionalCalendars;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Globalization.Calendar.Eras":
                userType = (global::Crimson.Crimson_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Globalization.Calendar");
                xamlMember = new global::Crimson.Crimson_Windows_XamlTypeInfo.XamlMember(this, "Eras", "Int32[]");
                xamlMember.Getter = get_22_Calendar_Eras;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Globalization.Calendar.IsReadOnly":
                userType = (global::Crimson.Crimson_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Globalization.Calendar");
                xamlMember = new global::Crimson.Crimson_Windows_XamlTypeInfo.XamlMember(this, "IsReadOnly", "Boolean");
                xamlMember.Getter = get_23_Calendar_IsReadOnly;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Globalization.Calendar.MaxSupportedDateTime":
                userType = (global::Crimson.Crimson_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Globalization.Calendar");
                xamlMember = new global::Crimson.Crimson_Windows_XamlTypeInfo.XamlMember(this, "MaxSupportedDateTime", "System.DateTime");
                xamlMember.Getter = get_24_Calendar_MaxSupportedDateTime;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Globalization.Calendar.MinSupportedDateTime":
                userType = (global::Crimson.Crimson_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Globalization.Calendar");
                xamlMember = new global::Crimson.Crimson_Windows_XamlTypeInfo.XamlMember(this, "MinSupportedDateTime", "System.DateTime");
                xamlMember.Getter = get_25_Calendar_MinSupportedDateTime;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Globalization.Calendar.TwoDigitYearMax":
                userType = (global::Crimson.Crimson_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Globalization.Calendar");
                xamlMember = new global::Crimson.Crimson_Windows_XamlTypeInfo.XamlMember(this, "TwoDigitYearMax", "Int32");
                xamlMember.Getter = get_26_Calendar_TwoDigitYearMax;
                xamlMember.Setter = set_26_Calendar_TwoDigitYearMax;
                break;
            case "System.Globalization.CultureInfo.Parent":
                userType = (global::Crimson.Crimson_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Globalization.CultureInfo");
                xamlMember = new global::Crimson.Crimson_Windows_XamlTypeInfo.XamlMember(this, "Parent", "System.Globalization.CultureInfo");
                xamlMember.Getter = get_27_CultureInfo_Parent;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Globalization.CultureInfo.TextInfo":
                userType = (global::Crimson.Crimson_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Globalization.CultureInfo");
                xamlMember = new global::Crimson.Crimson_Windows_XamlTypeInfo.XamlMember(this, "TextInfo", "System.Globalization.TextInfo");
                xamlMember.Getter = get_28_CultureInfo_TextInfo;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Globalization.CultureInfo.TwoLetterISOLanguageName":
                userType = (global::Crimson.Crimson_Windows_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Globalization.CultureInfo");
                xamlMember = new global::Crimson.Crimson_Windows_XamlTypeInfo.XamlMember(this, "TwoLetterISOLanguageName", "String");
                xamlMember.Getter = get_29_CultureInfo_TwoLetterISOLanguageName;
                xamlMember.SetIsReadOnly();
                break;
            }
            return xamlMember;
        }
    }

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::Crimson.Crimson_Windows_XamlTypeInfo.XamlSystemBaseType
    {
        global::Crimson.Crimson_Windows_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::Crimson.Crimson_Windows_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::Crimson.Crimson_Windows_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::Crimson.Crimson_Windows_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}


